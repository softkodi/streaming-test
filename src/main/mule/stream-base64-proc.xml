<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" >
  <http:listener-connection host="0.0.0.0" port="8083" />
</http:listener-config>
<http:request-config name="HTTP_Request_configuration" doc:name="HTTP Request configuration" doc:id="e8431592-6628-4a66-ae18-0bb06cb5c87b" >
		<http:request-connection host="localhost" port="8083" />
	</http:request-config>
	<file:config name="File_Config" doc:name="File Config" doc:id="a77d9882-e776-4719-aab5-65bdd5dc9529" />
	<flow name="dw-streamingFlow" >
<!-- [STUDIO:"Listener"]  <http:listener doc:name="Listener" config-ref="HTTP_Listener_config" path="/stream-proc" outputMimeType="application/json; streaming=true">
    <non-repeatable-stream />
  </http:listener> [STUDIO] -->
  <logger level="INFO" doc:name="Logger" doc:id="ed14d160-21e0-4db1-8123-49ecf8f5293b" message="Request Received in Process Layer  #[now()]" />
		<ee:transform doc:name="Transform Message" >
    <ee:message >
      <ee:set-payload ><![CDATA[%dw 2.0
output application/json deferred=true


---
payload]]></ee:set-payload>
    </ee:message>
  </ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="9fa476d4-6235-4e70-8dac-fccd71e2d5b3" message="Response has been sent from Process Layer"/>
		<file:write doc:name="Write" doc:id="10c44d4d-dede-4558-97f1-b2fe88df4795" config-ref="File_Config" path="C:\demo1\inbound\sample.txt"/>
	
</flow>
<flow name="dw-streamingFlow-copy" >
  <http:listener doc:name="Listener" config-ref="HTTP_Listener_config" path="/stream-exp" outputMimeType="application/json; streaming=true" responseStreamingMode="ALWAYS">
    <ee:repeatable-file-store-stream inMemorySize="3" bufferUnit="MB" />
			
  </http:listener>
		<set-variable value="#[now()]" doc:name="Set ExpStartTime" doc:id="ab546840-8063-4b04-bc94-8dde2839ce2d" variableName="ExpStartTime" />
		<logger level="INFO" doc:name="Logger" doc:id="4515c007-3641-49bd-9425-0f36664b5813" message="Before Transform in EXP: StartTime : #[vars.ExpStartTime]" />
		<set-variable value="#[payload.requiredFields]" doc:name="Set reqFields" doc:id="109f2cab-c8f3-4557-83b0-10cb62d2d80a" variableName="reqFields"/>
		<ee:transform doc:name="Transform Message" doc:id="bc4fac42-71b5-4707-a535-f7910b754c8d">
    <ee:message >
      <ee:set-payload ><![CDATA[%dw 2.0
output application/json deferred=true
import * from dw::Runtime
fun parity(n: Number): String =
  if (isEven(n))
    "even" 
  else 
    "odd"
---
{
requiredFields: vars.reqFields,
docData: payload.documentData map (obj) -> obj ++ {
	parity: parity(obj.number) ++ 
	// wait 2000 ++
	log('Exp Log', obj.number)
}
}
]]></ee:set-payload>
    </ee:message>
			<ee:variables >
			</ee:variables>
  
</ee:transform>
<!-- [STUDIO:"Transform Message"]		<ee:transform doc:name="Transform Message" doc:id="cc245e4b-cc67-4f31-a114-3c9136e415c7" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

&#45;&#45;-
payload wait 2000]]></ee:set-payload>
			</ee:message>
		</ee:transform> [STUDIO] -->
		<http:request method="POST" doc:name="Request" doc:id="845fce1b-33c8-4190-9ec9-54aa75a06f4e" config-ref="HTTP_Request_configuration" path="/stream-proc" requestStreamingMode="ALWAYS">
			<http:headers ><![CDATA[#[output application/java
---
{
	test : "dummy",
	val: true,
	file: vars.reqFields.fileName,
	modified: vars.reqFields.modified
}]]]></http:headers>
		</http:request>
		<!-- [STUDIO:"Write"]		<file:write doc:name="Write" doc:id="aa409cad-7e1b-401b-be2e-9bd9c4ecbd12" path='#["C:\demo2\inbound1" ++ "\out" ++ "-" ++( now() &gt;&gt; "CST" ) as String {format: "hh-mm-SS"} ++ ".txt"]'>
		</file:write> [STUDIO] -->
		<ee:transform doc:name="Transform Message" doc:id="85973f7a-42f8-49e4-b03e-858af738c35b" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="expEndTime" ><![CDATA[%dw 2.0
output application/json
var cTime = now()
---
{
	ExpStartTime: 
	log("timestamp " ++ vars.ExpStartTime as String {format:"yyyy-MM-dd'T'HH:mm:ss.SSS"}, "ExpStartTime"),
	ExpEndTime: 
	log("timestamp " ++ cTime as String {format:"yyyy-MM-dd'T'HH:mm:ss.SSS"}, "ExpEndTime"),
	ExpProcessingTime: log("timestamp " ++ vars.ExpStartTime - cTime, "ExpProcessingTime")
	 
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="337e235d-adc4-4d46-8b65-1544d3e6c0f7" message="End of EXP API : #[now()]"/>

</flow>
	<flow name="stream-base64-procFlow" doc:id="094337b2-a478-4959-81ab-befbae6e8108" >
		<http:listener doc:name="Listener" doc:id="f9272b3a-ceb3-48ba-8bea-e54d3819fe1d" config-ref="HTTP_Listener_config" path="/stream-proc" responseStreamingMode="ALWAYS" outputMimeType="application/json; streaming=true"/>
		<set-variable value="#[now()]" doc:name="Set SysStartTime" doc:id="93a921c1-ad96-419f-8483-2bc1eb26b5f6" variableName="ProcStartTime"/>
		<logger level="INFO" doc:name="Logger" doc:id="11f81d1e-cda6-4f8a-9948-77360cd5c00b" message="Before Transform in Proc API: StartTime: #[vars.ProcStartTime]"/>
	<ee:transform doc:name="Transform Message" doc:id="8f49f972-e844-4e00-b530-c55b6da6af0f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json deferred=true
import * from dw::Runtime
---
{
	fileName: attributes.headers.'file',
	docdata: payload.docData map (obj) -> 
    (obj.number) ++ log('Proc DWL', obj.number)
	
	 }
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
<http:request method="POST" doc:name="Request" doc:id="2e71ee72-3597-40e5-9447-c50e51a7cd26" config-ref="HTTP_Request_configuration" path="/stream-sys" requestStreamingMode="ALWAYS"/>
		<!-- [STUDIO:"Write"]			</file:write> [STUDIO] -->
		<ee:transform doc:name="Transform Message" doc:id="89d1d7e0-5a11-40f2-b914-813a758e4bce" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="procEndTime" ><![CDATA[%dw 2.0
output application/json
var pcTime = now()
---
{
	ProcStartTime: log("timestamp " ++ vars.ProcStartTime as String {format:"yyyy-MM-dd'T'HH:mm:ss.SSS"}, "ProcStartTime"),
	ProcEndTime: log("timestamp " ++ pcTime as String {format:"yyyy-MM-dd'T'HH:mm:ss.SSS"}, "ProcEndTime"),
	ProcProcessingTime: log("timestamp " ++ vars.ProcStartTime - pcTime, "ProcProcessingTime")
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="326766e1-dc12-4f27-af9e-5bffcc446b18" message="End of Proc API: #[now()]"/>
	
</flow>
	<flow name="stream-base64-procFlow1" doc:id="eb32db42-895f-4a55-a45e-4f5e51e777ce" >
		<http:listener doc:name="Listener" doc:id="1b1b5d90-2478-40cd-88af-f796f70cb2ff" config-ref="HTTP_Listener_config" path="/stream-sys" responseStreamingMode="ALWAYS" outputMimeType="application/json; streaming=true" />
		<set-variable value="#[now()]" doc:name="Set SysStartTime" doc:id="2192e4ec-1ec5-404b-9873-068f8e5fdbb8" variableName="SysStartTime"/>
		<logger level="INFO" doc:name="Logger" doc:id="82e95725-8104-43a9-9a9d-9978357644db" message="Sys API has been invoked: Start Time : #[vars.SysStartTime]"/>
		<ee:transform doc:name="Transform Message" doc:id="aa91dee5-6a8a-4e59-accf-bf8a4882236d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json deferred=true
import * from dw::Runtime
---
{
	nameOfFile: attributes.headers.'file',
	originalData: payload.docdata map (obj, num) -> ( obj 
	++ log('Sys DWL:', obj))
	
	 }
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<file:write doc:name="Write" doc:id="d5a4b727-aa5c-4489-97d9-cd5b1db51fa3" path='#["C:\demo2\inbound1" ++ "\out" ++ "-" ++( now() &gt;&gt; "CST" ) as String {format: "hh-mm-SS"} ++ ".txt"]'>
	
	</file:write>
		<ee:transform doc:name="Transform Message" doc:id="d28b6299-e755-4462-bb0c-f87a72a61731" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="sysEndTime" ><![CDATA[output application/json
var scTime = now()
---
{
	SysStartTime: log("timestamp " ++ vars.SysStartTime as String {format:"yyyy-MM-dd'T'HH:mm:ss.SSS"}, "SysStartTime"),
	SysEndTime: log("timestamp " ++ scTime as String {format:"yyyy-MM-dd'T'HH:mm:ss.SSS"}, "SysEndTime"),
	SysProcessingTime: log("timestamp " ++ vars.SysStartTime - scTime, "SysProcessingTime")
}
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="5b3e4777-b36c-4b74-9170-de91f5a64d11" message="Sys API Completed: #[now()]"/>
	</flow>
	
</mule>
